days = as.Date(days)
days = str_replace_all(days, "X", "0")
days = as.Date(days)
days[1:30]
days = colnames(int_data)
days = str_replace_all(days, "X", "0")
days[1:30]
days = as.Date(days)
days
days = str_replace_all(days, "X", "")
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = as.Date(days)
length(days[1])
class(days)
days = apply(X = days, FUN = separate_longer_delim(delim = "."))
days = apply(X = days, FUN = separate_longer_delim(days, delim = "."))
days = apply(X = days, FUN = str_split(pattern = "."))
for (i in c(1, length(days))){
days[i] = str_split(days[i], ".")
}
head(days)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
str_split("1.24.20", ".")
str_split("1.24.20", '.')
str_split("1.24.20", '. ')
strsplit("1.24.20", '.')
strsplit("1.24.20", ".")
strsplit("1.24.20", ".", fixed = TRUE)
days[i] = strsplit(days[i], ".", fixed = TRUE)
head(days)
a = days[1]
a
days = colnames(int_data)
days = str_replace_all(days, "X", "")
a = days[1]
a
a = strsplit(a, ".", fixed = TRUE)
a
strsplit(days[i], ".", fixed = TRUE)
strsplit(days, ".", fixed = TRUE)
days = strsplit(days, ".", fixed = TRUE)
days = as.Date(days)
days = as.numeric(strsplit(days, ".", fixed = TRUE))
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = as.numeric(strsplit(days, ".", fixed = TRUE))
days = apply(days, FUN = unlist)
days = strsplit(days, ".", fixed = TRUE)
days = apply(days, FUN = unlist)
days = as.Date(days)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
View(days)
days = apply(days, FUN = as.numeric)
days = strsplit(days, ".", fixed = TRUE)
days = apply(days, FUN = as.numeric)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = unlist(strsplit(days, ".", fixed = TRUE))
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
days_df = data.frame("Date" = days)
head(days_df)
days_df = data.frame(days)
head(days_df)
days_df[1,1]
days_df[1,3]
rownames(days_df)
colnames(days_df)
days_df = data.frame("Date" = t(days))
colnames(days_df)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
for(i in 1:length(days)){
days[[i]] = as.numeric(days[[i]])
}
for(i in 1:length(days)){
days[[i]] = as.numeric(days[[i]])
days[[i]] = as.Date(days[[i]])
}
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
for(i in 1:length(days)){
days[[i]] = as.numeric(days[[i]])
}
convert_do_date = function(v){
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
convert_to_date = function(v){
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = lapply(days, convert_to_date)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%YY-%m-%d")
}
days = lapply(days, convert_to_date)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = lapply(days, convert_to_date)
df_final = t(data.frame(select(imported_data, -c(Province.State, Lat, Long))))
df_final = select(imported_data, -c(Province.State, Lat, Long))
head(df_final)
head(t(df_final))
df_final = select(imported_data, -c(Province.State, Lat, Long))
df_final[1,1:10]
t(df_final)[1,1:10]
t(df_final)[1,1:3]
str(t(df_final)[1,1:3])
str(t(df_final))
colnames(t(df_final))
str(df_final)
str(t(df_final))
df_final_t = t(df_final)
df_final = t(int_data)
View(int_data)
df_final = t(int_data)
rm(ls())
rm(list = ls())
# Task 1
imported_data = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
str(imported_data)
imported_data = na.omit(imported_data)
int_data = select(imported_data, -c(Province.State, Country.Region, Lat, Long))
sum_p = apply(X = int_data, MARGIN = 1, sum)
mean_p = trunc(apply(X = int_data, MARGIN = 1, mean))
std_p = trunc(apply(X = int_data, MARGIN = 1, sd))
# Table 1
df_stats = data.frame("Country/Region" = imported_data$Country.Region,
"Latitude" = imported_data$Lat,
"Longtitude" = imported_data$Long,
"Sum of all patients" = sum_p,
"Mean number of patients" = mean_p,
"Standard deviation of mean" = std_p)
head(df_stats)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = lapply(days, convert_to_date)
df_final = t(int_data)
View(df_final)
colnames(df_final) = imported_data$Country.Region
View(df_final)
View(days)
df_final = data.frame("Date" = days, df_final)
View(df_final)
print(f)
print(f())
f = function(){
library(dplyr)
# Example data frame
df <- data.frame(id = 1:2, name = c("Jon", "Mark"))
# Example list
my_list <- list(c("Mary", "James", "Thomas"), c("Greta", "Sally"))
# Add the list as a new column
df <- df %>%
mutate(children = my_list)
}
print(f())
f = function(){
# Example data frame
df <- data.frame(A = 1:5, B = 6:10)
# Example list
my_list <- list(11:15)
# Add the list as the first column
df <- data.frame(my_list, df)
}
print(f())
df_final = t(int_data)
colnames(df_final) = imported_data$Country.Region
View(df_final)
View(days)
sdd = data.frame(days, df_final)
View(df_final)
View(sdd)
df_final = t(int_data)
colnames(df_final) = imported_data$Country.Region
sdd = df_final %>% mutate("Date" = days)
class(days)
class(df_final)
days_df = data.frame("date" = days)
View(days)
View(days_df)
days_df = data.frame("date" = days)
View(days_df)
days_df = data.frame(date = days)
View(days_df)
days_df = data.frame(unlist(date = days))
days_df = data.frame("date" = unlist(days))
View(days_df)
View(days)
# Example list of Date values
date_list <- list(as.Date("2024-01-01"), as.Date("2024-01-02"), as.Date("2024-01-03"))
# Convert the list to a data frame
date_df <- data.frame(date = unlist(date_list))
# Print the data frame
print(date_df)
View(date_list)
View(date_df)
days_df = data.frame("date" = as.Date(unlist(days)))
View(days_df)
days_df = data.frame("Date" = as.Date(unlist(days)))
View(date_list)
View(date_df)
View(days_df)
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
View(df_final)
rownames(df_final) = NULL
View(df_final)
colnames(df_final)
df_stats = df_stats %>% unite(col = "Country/Region, Province.State",
Country.Region,
to_be_deleted,
sep = ", ")
# Table 1
df_stats = data.frame("Country/Region" = imported_data$Country.Region,
"to_be_deleted" = imported_data$Province.State,
"Latitude" = imported_data$Lat,
"Longtitude" = imported_data$Long,
"Sum of all patients" = sum_p,
"Mean number of patients" = mean_p,
"Standard deviation of mean" = std_p)
df_stats = df_stats %>% unite(col = "Country/Region, Province.State",
Country.Region,
to_be_deleted,
sep = ", ")
head(df_stats)
View(df_stats)
colnames(df_final) = df_stats$`Country/Region, Province.State`
View(df_final)
days = lapply(days, convert_to_date)
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region, Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
View(df_final)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = lapply(days, convert_to_date)
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region, Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
View(df_final)
df_stats = df_stats %>% unite(col = "Country/Region, Province.State",
Country.Region,
to_be_deleted,
sep = " ")
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = lapply(days, convert_to_date)
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region, Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
View(df_final)
# Table 1
df_stats = data.frame("Country/Region" = imported_data$Country.Region,
"to_be_deleted" = imported_data$Province.State,
"Latitude" = imported_data$Lat,
"Longtitude" = imported_data$Long,
"Sum of all patients" = sum_p,
"Mean number of patients" = mean_p,
"Standard deviation of mean" = std_p)
df_stats = df_stats %>% unite(col = "Country/Region, Province.State",
Country.Region,
to_be_deleted,
sep = " ")
head(df_stats)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = lapply(days, convert_to_date)
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region, Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
head(days)
colnames(df_final[1:15])
df_stats$`Country/Region, Province.State` = str_replace_all(days, ".", "")
df_stats$`Country/Region, Province.State` = str_replace_all(df_stats$`Country/Region, Province.State`, ".", "")
head(df_stats)
View(df_stats)
rm(list = ls())
# Task 1
imported_data = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
str(imported_data)
imported_data = na.omit(imported_data)
int_data = select(imported_data, -c(Province.State, Country.Region, Lat, Long))
sum_p = apply(X = int_data, MARGIN = 1, sum)
mean_p = trunc(apply(X = int_data, MARGIN = 1, mean))
std_p = trunc(apply(X = int_data, MARGIN = 1, sd))
# Table 1
df_stats = data.frame("Country/Region" = imported_data$Country.Region,
"to_be_deleted" = imported_data$Province.State,
"Latitude" = imported_data$Lat,
"Longtitude" = imported_data$Long,
"Sum of all patients" = sum_p,
"Mean number of patients" = mean_p,
"Standard deviation of mean" = std_p)
df_stats = df_stats %>% unite(col = "Country/Region, Province.State",
Country.Region,
to_be_deleted,
sep = " ")
head(df_stats)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
days = lapply(days, convert_to_date)
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region, Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
colnames(df_final[1:15])
colnames(df_final) = str_replace_all(colnames(df_final), ".", "")
View(df_final)
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region, Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
View(df_final)
View(df_stats)
write(df_stats, file = "/data_output/df_stats.txt")
if(!dir.exists("data_output")){
dir.create("data_output")
}
if(!dir.exists("data_output")){
dir.create("data_output")
}
else {
if(!dir.exists("data_output")){
dir.create("data_output")
} else {
cat(1)
}
if(!dir.exists("data_output")){
dir.create("data_output")
} else {
cat(1)
}
if(!dir.exists("data_output")){
dir.create("data_output")
}
# Table 1
df_stats = data.frame("Country/Region" = imported_data$Country.Region,
"to_be_deleted" = imported_data$Province.State,
"Latitude" = imported_data$Lat,
"Longtitude" = imported_data$Long,
"Sum of all patients" = sum_p,
"Mean number of patients" = mean_p,
"Standard deviation of mean" = std_p)
df_stats = df_stats %>% unite(col = "Country/Region Province.State",
Country.Region,
to_be_deleted,
sep = " ")
# Table 1
library(dplyr)
df_stats = df_stats %>% unite(col = "Country/Region Province.State",
Country.Region,
to_be_deleted,
sep = " ")
library(tidyr)
df_stats = df_stats %>% unite(col = "Country/Region Province.State",
Country.Region,
to_be_deleted,
sep = " ")
head(df_stats)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
library(stringr)
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
# Time scale
days = lapply(days, convert_to_date)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
# Time scale
days = lapply(days, convert_to_date)
# Table 2
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
write(df_stats, file = "data_output/df_stats.txt")
write.table(x = df_stats, file = "data_output/df_stats.txt")
write.table(x = df_stats, file = "data_output/df_stats.txt", row.names = FALSE)
write.csv(x = df_stats, file = "data_output/df_stats.csv")
write.xlsx()
install.packages("openxlsx")
library(openxlsx)
write.xlsx(x = df_stats, file = "data_output/df_stats.xlsx", row.names = FALSE)
write.xlsx(x = df_stats, file = "data_output/df_stats.xlsx", rowNames = FALSE)
write.csv(x = df_stats, file = "data_output/df_stats.csv", row.names = FALSE)
# Task 1
imported_data = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
str(imported_data)
imported_data = na.omit(imported_data)
int_data = select(imported_data, -c(Province.State, Country.Region, Lat, Long))
# Task 1
library(dplyr)
library(tidyr)
library(stringr)
imported_data = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
str(imported_data)
imported_data = na.omit(imported_data)
int_data = select(imported_data, -c(Province.State, Country.Region, Lat, Long))
sum_p = apply(X = int_data, MARGIN = 1, sum)
mean_p = trunc(apply(X = int_data, MARGIN = 1, mean))
std_p = trunc(apply(X = int_data, MARGIN = 1, sd))
# Table 1
df_stats = data.frame("Country/Region" = imported_data$Country.Region,
"to_be_deleted" = imported_data$Province.State,
"Latitude" = imported_data$Lat,
"Longtitude" = imported_data$Long,
"Sum of all patients" = sum_p,
"Mean number of patients" = mean_p,
"Standard deviation of mean" = std_p)
df_stats = df_stats %>% unite(col = "Country/Region Province.State",
Country.Region,
to_be_deleted,
sep = " ")
head(df_stats)
days = colnames(int_data)
days = str_replace_all(days, "X", "")
days = strsplit(days, ".", fixed = TRUE)
convert_to_date = function(v){
v = as.numeric(v)
date_str = paste(v[3]+2000, v[1], v[2], sep = "-")
as.Date(date_str, format = "%Y-%m-%d")
}
# Time scale
days = lapply(days, convert_to_date)
# Table 2
df_final = t(int_data)
colnames(df_final) = df_stats$`Country/Region Province.State`
df_final = data.frame("Date" = as.Date(unlist(days)), df_final)
rownames(df_final) = NULL
# Export
if(!dir.exists("data_output")){
dir.create("data_output")
}
library(openxlsx)
write.table(x = df_stats, file = "data_output/df_stats.txt", row.names = FALSE)
write.csv(x = df_stats, file = "data_output/df_stats.csv", row.names = FALSE)
write.xlsx(x = df_stats, file = "data_output/df_stats.xlsx", rowNames = FALSE)
View(imported_data)
