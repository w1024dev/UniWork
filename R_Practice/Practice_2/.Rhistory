# Task 3
I = diag(1, nrow = 2, ncol = 2)
B = I - A
B
# Task 4
f = (4, 2)
# Task 4
f = c(4, 2)
u = c(0.2, -0.3)
u_result = solve(A, f)
u_result
A
print(u_result)
# or??
print(A %*% u)
# Task 6
u_iter = matrix(u)
u_iter
for (i in c(1:7)){
u_iter = cbind(u_iter, B%*%u[i]+f)
}
for (i in c(1:7)){
u_iter = cbind(u_iter, (B%*%u_iter[i])+f)
}
B
u_iter[1]
for (i in c(1:7)){
u_iter = cbind(u_iter, (B%*%u_iter[,i])+f)
}
u_iter
# Task 6
u_iter = matrix(u)
for (i in c(1:7)){
u_iter = cbind(u_iter, (B*u_iter[,i])+f)
}
u_iter
# Task 6
u_iter = matrix(u)
for (i in c(1:7)){
u_iter = cbind(u_iter, (B%*%u_iter[,i])+f)
}
u_iter
# Task 6
u_iter = matrix(u)
for (i in c(1:6)){
u_iter = cbind(u_iter, (B%*%u_iter[,i])+f)
}
u_iter
u_iter[,7]
u_result
# Task 7
#???
u_iter[,7]
u_result
# Task 8
A
# Task 8
A = A / max(A)
A
f
f = f / max(A)
f
f = f / 9
# Task 1
A = diag(c(4, 9), nrow = 2, ncol = 2)
rownames(A) = c("eq1", "eq2")
colnames(A) = c("x1", "x2")
# Task 8
m = max(A)
A = A / m
f = f / m
A
f
4 / 9
m
2 / 9
# Task 4
f = c(4, 2)
f
f = f / m
#Task 9
eigen_values = eigen(A)
eigen_values
I = diag(1, nrow = 2, ncol = 2)
B = I - A
B
u_result_2 = solve(A, f)
u_iter_2 = matrix(u)
for (i in c(1:6)){
u_iter_2 = cbind(u_iter_2, (B%*%u_iter_2[,i])+f)
}
u_iter_2[,7]
u_result_2
u_iter_2
B
B%*%u_iter_2[,1]
f
B%*%u_iter_2[,2]
B%*%u_iter_2[,2]+f
u_iter_2
u_result_2
u_iter_2[,6]
u_result_2
u_iter[,7] - u_result
task_7_res = u_iter[,7] - u_result
task_9_res = u_iter_2[,6] - u_result_2
#Task 10
task_7_res
task_9_res
# Задание сеточной поверхности
x = seq(from = dekart_begin, to = dekart_end, by = step)
step = 1 # Шаг сетки
dekart_begin = -5 # Начало сетки
dekart_end = 5 # Конец сетки
# Задание сеточной поверхности
x = seq(from = dekart_begin, to = dekart_end, by = step)
rm(list = ls())
step = 1 # Шаг сетки
dekart_begin = -5 # Начало сетки
dekart_end = 5 # Конец сетки
# Задание сеточной поверхности
x = seq(from = dekart_begin, to = dekart_end, by = step)
y = x
# Задание двумерной функции на координатной сетке
surface_matrix = outer(X = x,
Y = y,
FUN = function(x,y) Re(exp(-1i * 0.5 * x * y)))
dimnames(surface_matrix) = list(x, y)
# Task 1
n_elem = count(surface_matrix)
# Task 1
n_elem = length(surface_matrix)
# Task 1
n_elem = as.numeric(length(surface_matrix))
n_rows = length(surface_matrix[,1])
n_rows = as.numeric(length(surface_matrix[,1]))
n_cols = as.numeric(length(surface_matrix[1,]))
sum_main_diag = 0
i = 1
repeat{
sum_main_diag = sum_main_diag + surface_matrix[i, i]
i = i + 1
if (i == length(surface_matrix[1,])){
break
}
}
sum_main_diag = 0
i = 1
repeat{
print(surface_matrix[i, i])
sum_main_diag = sum_main_diag + surface_matrix[i, i]
i = i + 1
if (i == length(surface_matrix[1,])){
break
}
}
surface_matrix[1,]
sum_main_diag = sum(diag(surface_matrix))
sum_main_diag = sum(diag(surface_matrix))
n_cols = nrow(surface_matrix)
# Task 1
n_elem = ncol(surface_matrix)
n_rows = ncol(surface_matrix)
# Task 1
n_elem = as.numeric(length(surface_matrix))
# Task 1
n_elem = length(surface_matrix))
# Task 1
n_elem = length(surface_matrix)
sum_middle_row = sum(surface_matrix[n_rows/2])
n_rows/2
n_rows%/%2+1
sum_middle_row = sum(surface_matrix[n_rows%/%2+1])
sum_middle_row = sum(surface_matrix[n_rows%/%2+1,])
sum_middle_row = sum(surface_matrix[n_rows%/%2+1,])
surface_matrix[n_rows%/%2+1,]
surface_matrix
row_sums = lapply(surface_matrix, 1, sum)
row_sums
row_sums = lapply(X = surface_matrix, MARGIN = 1, FUN = sum)
row_sums
row_sums = apply(X = surface_matrix, MARGIN = 1, FUN = sum)
row_sums
col_sums = apply(X = surface_matrix, MARGIN = 2, FUN = sum)
col_sums
write(paste("number of matrix elements:", n_elem), file = "summary.txt")
write(paste("number of rows:", n_rows), file = "summary.txt")
write(paste("number of cols:", n_cols), file = "summary.txt")
write(paste("“sum of main diag elements:", sum_main_diag), file = "summary.txt")
write(paste("sum of middle row elements:", sum_middle_row), file = "summary.txt")
write(paste("row sums:", row_sums), file = "summary.txt")
write(paste("“col sums:", col_sums), file = "summary.txt")
write(paste("number of matrix elements:", n_elem), file = "summary.txt")
write(paste("number of matrix elements:", n_elem), file = "summary.txt")
write(paste("number of rows:", n_rows), file = "summary.txt", append = TRUE)
write(paste("number of cols:", n_cols), file = "summary.txt", append = TRUE)
write(paste("“sum of main diag elements:", sum_main_diag), file = "summary.txt", append = TRUE)
write(paste("sum of middle row elements:", sum_middle_row), file = "summary.txt", append = TRUE)
write(paste("row sums:", paste(row_sums)), file = "summary.txt", append = TRUE)
write(paste("“col sums:", paste(col_sums)), file = "summary.txt", append = TRUE)
write(paste("“sum of main diag elements:", sum_main_diag), file = "summary.txt", append = TRUE)
paste(row_sums)
write(paste("row sums:", row_sums), file = "summary.txt", append = TRUE)
write(paste("row sums:", row_sums, sep = " "), file = "summary.txt", append = TRUE)
write(cat("row sums:", row_sums), file = "summary.txt", append = TRUE)
write(row_sums, file = "summary.txt", append = TRUE)
write(c("row sums:", row_sums), file = "summary.txt", append = TRUE)
write(c("row sums:", row_sums), file = "summary.txt", append = TRUE, sep = " ")
write(paste("number of matrix elements:", n_elem), file = "summary.txt")
write(paste("row sums:", paste(row_sums, collapse = " ")), file = "summary.txt", append = TRUE)
write(paste("number of matrix elements:", n_elem), file = "summary.txt")
write(paste("number of rows:", n_rows), file = "summary.txt", append = TRUE)
write(paste("number of cols:", n_cols), file = "summary.txt", append = TRUE)
write(paste("“sum of main diag elements:", sum_main_diag), file = "summary.txt", append = TRUE)
write(paste("sum of middle row elements:", sum_middle_row), file = "summary.txt", append = TRUE)
write(paste("row sums:", paste(row_sums, collapse = " ")), file = "summary.txt", append = TRUE)
write(paste("“col sums:", paste(col_sums, collapse = " ")), file = "summary.txt", append = TRUE)
paste(row_sums)
write(paste("number of matrix elements:", n_elem), file = "summary.txt")
write(paste("number of rows:", n_rows), file = "summary.txt", append = TRUE)
write(paste("number of cols:", n_cols), file = "summary.txt", append = TRUE)
write(paste("sum of main diag elements:", sum_main_diag), file = "summary.txt", append = TRUE)
write(paste("sum of middle row elements:", sum_middle_row), file = "summary.txt", append = TRUE)
write(paste("row sums:", paste(row_sums, collapse = " ")), file = "summary.txt", append = TRUE)
write(paste("col sums:", paste(col_sums, collapse = " ")), file = "summary.txt", append = TRUE)
sum_middle_col = sum(surface_matrix[,n_rows%/%2+1])
write(paste("number of matrix elements:", n_elem), file = "summary.txt")
write(paste("number of rows:", n_rows), file = "summary.txt", append = TRUE)
write(paste("number of cols:", n_cols), file = "summary.txt", append = TRUE)
write(paste("sum of main diag elements:", sum_main_diag), file = "summary.txt", append = TRUE)
write(paste("sum of middle row elements:", sum_middle_row), file = "summary.txt", append = TRUE)
write(paste("sum of middle column elements:", sum_middle_col), file = "summary.txt", append = TRUE)
write(paste("row sums:", paste(row_sums, collapse = " ")), file = "summary.txt", append = TRUE)
write(paste("col sums:", paste(col_sums, collapse = " ")), file = "summary.txt", append = TRUE)
summary("summary.txt", 1)
summary("summary.txt", 1)
summary("summary.txt", 1)
summary_file = function(nfile, option){
write(paste("number of matrix elements:", n_elem), file = nfile)
write(paste("number of rows:", n_rows), file = nfile, append = TRUE)
write(paste("number of cols:", n_cols), file = nfile, append = TRUE)
write(paste("sum of main diag elements:", sum_main_diag), file = nfile, append = TRUE)
if (option){
write(paste("sum of middle row elements:", sum_middle_row), file = nfile, append = TRUE)
write(paste("sum of middle column elements:", sum_middle_col), file = nfile, append = TRUE)
}
write(paste("row sums:", paste(row_sums, collapse = " ")), file = nfile, append = TRUE)
write(paste("col sums:", paste(col_sums, collapse = " ")), file = nfile, append = TRUE)
}
summary_file("summary.txt", 1)
summary_file = function(nfile, option){
write(paste("number of matrix elements:", n_elem), file = nfile)
write(paste("number of rows:", n_rows), file = nfile, append = TRUE)
write(paste("number of cols:", n_cols), file = nfile, append = TRUE)
write(paste("sum of main diag elements:", sum_main_diag), file = nfile, append = TRUE)
if (option){
write(paste("sum of middle row elements:", sum_middle_row), file = nfile, append = TRUE)
write(paste("sum of middle column elements:", sum_middle_col), file = nfile, append = TRUE)
}
write(paste("row sums:", paste(row_sums, collapse = " ")), file = nfile, append = TRUE)
write(paste("col sums:", paste(col_sums, collapse = " ")), file = nfile, append = TRUE)
}
surface_matrix = function(step1 = 1, dekart_begin1 = -5, dekart_end1 = 5,
step2 = step1, dekart_begin2 = dekart_begin1, dekart_end2 = dekart_end1,
nfile, is_square = 1){
# Задание сеточной поверхности
x = seq(from = dekart_begin1, to = dekart_end1, by = step1)
y = seq(from = dekart_begin2, to = dekart_end2, by = step2)
# Задание двумерной функции на координатной сетке
surface_matrix = outer(X = x,
Y = y,
FUN = function(x,y) Re(exp(-1i * 0.5 * x * y)))
dimnames(surface_matrix) = list(x, y)
n_elem = length(surface_matrix)
n_rows = ncol(surface_matrix)
n_cols = nrow(surface_matrix)
sum_main_diag = sum(diag(surface_matrix))
sum_middle_row = sum(surface_matrix[n_rows%/%2+1,])
sum_middle_col = sum(surface_matrix[,n_rows%/%2+1])
row_sums = apply(X = surface_matrix, MARGIN = 1, FUN = sum)
col_sums = apply(X = surface_matrix, MARGIN = 2, FUN = sum)
summary_file(nfile, is_square)
}
# Task 1
surface_matrix(nfile = "summary.txt")
# Task 2
begin = readline(prompt = "begin: ")
end = readline(prompt = "end: ")
step = readline(prompt = "step: ")
# Task 2
begin = as.numeric(readline(prompt = "begin: "))
end = as.numeric(readline(prompt = "end: "))
step = as.numeric(readline(prompt = "step: "))
surface_matrix(dekart_begin1 = begin, dekart_end1 = end, step1 = step,
nfile = "summary2.txt")
surface_matrix(dekart_begin1 = begin, dekart_end1 = end, step1 = step,
nfile = "summary2.txt")
summary_file = function(nfile, option,
n_elem, n_rows, n_cols,
row_sums,
col_sums,
sum_main_diag = 0,
sum_middle_row = 0,
){
# Task 1
surface_matrix(nfile = "summary.txt", 1,
n_elem, n_rows, n_cols,
row_sums, col_sums,
sum_main_diag,
sum_middle_row)
summary_file = function(nfile, option,
n_elem, n_rows, n_cols,
row_sums,
col_sums,
sum_main_diag,
sum_middle_row = 0,
sum_middle_col = 0
){
write(paste("number of matrix elements:", n_elem), file = nfile)
write(paste("number of rows:", n_rows), file = nfile, append = TRUE)
write(paste("number of cols:", n_cols), file = nfile, append = TRUE)
write(paste("sum of main diag elements:", sum_main_diag), file = nfile, append = TRUE)
if (option){
write(paste("sum of middle row elements:", sum_middle_row), file = nfile, append = TRUE)
write(paste("sum of middle column elements:", sum_middle_col), file = nfile, append = TRUE)
}
write(paste("row sums:", paste(row_sums, collapse = " ")), file = nfile, append = TRUE)
write(paste("col sums:", paste(col_sums, collapse = " ")), file = nfile, append = TRUE)
}
surface_matrix = function(step1 = 1, dekart_begin1 = -5, dekart_end1 = 5,
step2 = step1, dekart_begin2 = dekart_begin1, dekart_end2 = dekart_end1,
nfile, is_square = 1){
# Задание сеточной поверхности
x = seq(from = dekart_begin1, to = dekart_end1, by = step1)
y = seq(from = dekart_begin2, to = dekart_end2, by = step2)
# Задание двумерной функции на координатной сетке
surface_matrix = outer(X = x,
Y = y,
FUN = function(x,y) Re(exp(-1i * 0.5 * x * y)))
dimnames(surface_matrix) = list(x, y)
n_elem = length(surface_matrix)
n_rows = ncol(surface_matrix)
n_cols = nrow(surface_matrix)
sum_main_diag = sum(diag(surface_matrix))
sum_middle_row = sum(surface_matrix[n_rows%/%2+1,])
sum_middle_col = sum(surface_matrix[,n_rows%/%2+1])
row_sums = apply(X = surface_matrix, MARGIN = 1, FUN = sum)
col_sums = apply(X = surface_matrix, MARGIN = 2, FUN = sum)
summary_file(nfile, is_square,
n_elem, n_rows, n_cols,
row_sums, col_sums,
sum_main_diag,
sum_middle_row,
sum_middle_col)
}
surface_matrix(dekart_begin1 = begin, dekart_end1 = end, step1 = step,
nfile = "summary2.txt")
# Task 1
surface_matrix(nfile = "summary.txt")
surface_matrix(dekart_begin1 = begin, dekart_end1 = end, step1 = step,
nfile = "summary2.txt", is_square = 0)
# Task 3
x = c(-4, 16, 2, 5, 125, 5)
write(x, file = "inputs.txt")
# Task 3
x = c(-4, 16, 2, 5, 125, 5)
write(x, file = "inputs.txt")
write(x, file = "inputs.txt", sep = "\n")
data = readLines(con = "inputs.txt")
data = as.numeric(readLines(con = "inputs.txt"))
# Task 3
x = c(-4, 16, 2, 5, 125, 5)
write(x, file = "inputs.txt", sep = "\n")
data = as.numeric(readLines(con = "inputs.txt"))
surface_matrix(dekart_begin1 = data[1], dekart_end1 = data[2], step1 = data[3],
dekart_begin2 = data[4], dekart_end2 = data[5], step2 = data[6],
nfile = "summary3.txt", is_square = 0)
surface_matrix = function(step1 = 1, dekart_begin1 = -5, dekart_end1 = 5,
step2 = step1, dekart_begin2 = dekart_begin1, dekart_end2 = dekart_end1,
nfile, is_square = 1){
# Задание сеточной поверхности
x = seq(from = dekart_begin1, to = dekart_end1, by = step1)
y = seq(from = dekart_begin2, to = dekart_end2, by = step2)
# Задание двумерной функции на координатной сетке
surface_matrix = outer(X = x,
Y = y,
FUN = function(x,y) Re(exp(-1i * 0.5 * x * y)))
dimnames(surface_matrix) = list(x, y)
n_elem = length(surface_matrix)
n_rows = nrow(surface_matrix)
n_cols = ncol(surface_matrix)
sum_main_diag = sum(diag(surface_matrix))
if (n_rows %% 2 == 0){
middle_index1 = n_rows%/%2
}
else{
middle_index1 = n_rows%/%2+1
}
if (n_cols %% 2 == 0){
middle_index2 = n_cols%/%2
}
else{
middle_index2 = n_cols%/%2+1
}
sum_middle_row = sum(surface_matrix[middle_index1,])
sum_middle_col = sum(surface_matrix[,middle_index2])
row_sums = apply(X = surface_matrix, MARGIN = 1, FUN = sum)
col_sums = apply(X = surface_matrix, MARGIN = 2, FUN = sum)
summary_file(nfile, is_square,
n_elem, n_rows, n_cols,
row_sums, col_sums,
sum_main_diag,
sum_middle_row,
sum_middle_col)
}
surface_matrix(dekart_begin1 = data[1], dekart_end1 = data[2], step1 = data[3],
dekart_begin2 = data[4], dekart_end2 = data[5], step2 = data[6],
nfile = "summary3.txt", is_square = 0)
cars_matrix = as.matrix(cars)
# Task 1
cars_speed = cbind(matrix(1, nrow = nrow(cars_matrix)),
cars_matrix[,1])
cars_speed
cars_matrix[1:10,]
cars_speed
cars_speed[1:10,]
# Task 2
cars_dist = cars_matrix[,2]
cars_dist[1:10,]
cars_dist[1:10]
cars_dist
# Task 2
cars_dist = cars_matrix[,2]
print(solve(cars_speed))
t(cars_speed)%*%cars_speed
cars_speed[1:10,]
t(cars_speed)%*%cars_speed
solve(t(cars_speed)%*%cars_speed)
solve(t(cars_speed)%*%cars_speed) %*% t(cars_speed)
cars_dist
# Task 3
alpha = solve(t(cars_speed)%*%cars_speed) %*% t(cars_speed) %*% cars_dist
alpha
# Task 4
class(alpha)
alpha = as.vector(alpha)
# Task 3
alpha = solve(t(cars_speed)%*%cars_speed) %*% t(cars_speed) %*% cars_dist
alpha = as.vector(alpha)
# Task 4
class(alpha)
# Task 4
typeof(alpha)
# Task 3
alpha = solve(t(cars_speed)%*%cars_speed) %*% t(cars_speed) %*% cars_dist
# Task 4
typeof(alpha)
# Task 4
class(alpha)
alpha = as.vector(alpha)
# Task 4
class(alpha)
# Task 5
alpha_c = alpha[1]
alpha_x = alpha[2]
cat("alpha_c=", alpha_c, "\nalpha_x=", alpha_x)
cat("alpha_c =", alpha_c, "\nalpha_x =", alpha_x)
# Task 6
cars_speed_lm = cars_matrix[,1]
cars_speed_lm
# Task 7
cars_dist_lm = alpha_c + cars_speed_lm * alpha_x
# Task 8
dist_residuals = cars_dist_lm - cars_dist
# Task 9
dist_res_mean = sum(dist_residuals)/length(dist_residuals)
dist_residuals
dist_res_std_dev = sqrt(sum((dist_residuals - dist_res_mean)^2)/length(dist_residuals))
cat("mean =", dist_res_mean, "\nstd_dev =", dist_res_std_dev)
cars_dist_lm
# Task 10
cars_dist_lm
# Task 11
cat("mean =", dist_res_mean, "\nstd_dev =", dist_res_std_dev)
# Task 1
A = diag(c(4, 9), nrow = 2, ncol = 2)
# Task 2
eigen_values = eigen(A)
eigen_values
# Task 3
I = diag(1, nrow = 2, ncol = 2)
B = I - A
# Task 4
f = c(4, 2)
u = c(0.2, -0.3)
# Task 5
# ????
u_result = solve(A, f)
print(u_result)
# or??
print(A %*% u)
# or??
print(A %*% u, f)
print(f)
# or??
print(A %*% u)
# Task 5
# ????
u_result = solve(A, f)
print(u_result)
u = c(0.2, -0.3)
u
